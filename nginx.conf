user  root;
worker_processes  1;

error_log  /app/logs/error.log;
error_log  /app/logs/error.log  notice;
error_log  /app/logs/error.log  info;

pid        /app/tmp/nginx.pid;
events {
    worker_connections  1024;
}

http {
    include       /nginx/conf/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /app/logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    init_by_lua '
      package.path = "/app/src/?.lua;/app/lib/?.lua;" .. package.path
      local connection = require("mongorover.MongoClient").new("mongodb://mongolocal:27017/")
      front_controller = require("front_controller"):new(ngx, connection)
    ';
    server {
        listen       80;
        server_name  localhost;
        set $session_redis_host          redislocal;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
          root   /app/public;
          index  index.html index.htm;
        }
        
        location ~ ^/articles\.json$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller:call{controller = "articles", action = "index"}
            else
              ngx.exit(405)
            end
          ';
        }

        location ~ ^/articles$ {
          # Pass altered request body to this location
          upload_pass   @upload;

          # Store files to this directory
          upload_store /app/tmp;

          # Allow uploaded files to be read only by user
          upload_store_access user:rw group:rw all:rw;

          # Set specified fields in request body
          upload_set_form_field $upload_field_name.name "$upload_file_name";
          upload_set_form_field $upload_field_name.content_type "$upload_content_type";
          upload_set_form_field $upload_field_name.path "$upload_tmp_path";

          # Inform backend about hash and size of a file
          upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
          upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";

          upload_pass_form_field "^title$|^authors.\d+$";

          upload_cleanup 400 404 499 500-505;
        }

        location ~ ^/articles/(?<id>\d+)\.json$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller:call{controller = "articles", action = "show"}
            elseif ngx.var.request_method == "PUT" then 
              front_controller:call{controller = "articles", action = "update"}
            elseif ngx.var.request_method == "DELETE" then 
              front_controller:call{controller = "articles", action = "destroy"}
            else
              ngx.exit(405)
            end
          ';
        }
        
        location ~ ^/articles/(?<id>[\w]+).pdf$ {
          content_by_lua '
            if ngx.var.request_method == "GET" then
              front_controller:call{controller = "articles", action = "download", path_args = {id = ngx.var.id}}
            else 
              ngx.exit(405)
            end
          ';
        }
        
        location @upload {
          content_by_lua '
            front_controller:call{controller = "articles", action = "create"}
          ';
        }

        #error_page  404              404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  50x.html;

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
